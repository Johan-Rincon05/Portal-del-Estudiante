Eres el asistente de desarrollo IA de Replit. Genera una aplicación web full‑stack llamada “Portal del Estudiante (PDE)” usando React + TypeScript + Tailwind CSS en el frontend y Supabase (Postgres + Auth + Storage) en el backend. Sigue estos requisitos exactamente:

Configuración del proyecto

Inicializa un nuevo repositorio Git y un proyecto React con TypeScript.

Instala Tailwind CSS ejecutando npx tailwindcss init -p y configúralo.

Añade el cliente de Supabase configurando las variables de entorno REACT_APP_SUPABASE_URL y REACT_APP_SUPABASE_ANON_KEY.

Autenticación y roles

Configura Supabase Auth para registro e inicio de sesión con email y contraseña.

Almacena en user_metadata la propiedad role con valores posibles: "estudiante", "admin", "superuser".

Crea dos usuarios con rol admin y uno con rol superuser usando la API de administración de Supabase.

Esquema de base de datos y RLS

Crea las tablas profiles, documents y requests.

Estructura de profiles: id (PK, UUID), full_name, email, document_type, document_number, birth_date, phone, city, address, created_at.

Estructura de documents: id (PK), user_id (FK), type, path, uploaded_at.

Estructura de requests: id (PK), user_id (FK), subject, message, status, response, created_at.

Habilita Row Level Security (RLS) en las tres tablas.

Políticas RLS:

Estudiante puede SELECT/UPDATE en su propio profiles, INSERT sus propios documents y requests, y SELECT sus propios documents y requests.

Admin y superuser pueden SELECT/UPDATE en todas las filas de profiles, documents y requests.

Superuser puede gestionar auth.users.

Rutas y layout

Usa React Router v6.

Rutas públicas: /login, /register, /reset-password.

Rutas protegidas envueltas en <PrivateRoute allowedRoles={[…]}>.

Crea un <Layout> común para páginas autenticadas que incluya un <Sidebar> con enlaces según rol y un header con botón “Cerrar sesión”.

Módulo Estudiante

Registro (/register): formulario con full_name, email, document_type, document_number, birth_date, phone, city, address, password. Al finalizar, envía verificación de correo y redirige a /login.

Login (/login): formulario con email y password.

Perfil (/profile): obtiene y actualiza datos de perfil con upsert.

Documentos (/documents): subir archivos de tipos [Cédula, Diploma, Acta, Foto, Recibo, Formulario], listar, descargar y eliminar.

Solicitudes (/requests): formulario para crear solicitud (subject, message), listar propias solicitudes con estado y respuesta.

Módulo Admin

Lista de Estudiantes (/admin/students): tabla con todos los profiles, filtros por ciudad, rango de fechas y buscador por nombre o documento, botón para ver detalle.

Detalle de Estudiante (/admin/students/:id): editar perfil, listar/descargar/eliminar documentos, ver y responder solicitudes (cambiar status y guardar response).

Gestión de Solicitudes (/admin/requests): tabla con todas las solicitudes y modal para responder.

Módulo Superuser

Gestión de Usuarios (/admin/users): lista de todos los usuarios, formulario para crear usuario (email, contraseña temporal, rol), edición inline de roles, eliminación de usuario. Usa la API de administración de Supabase.

Hooks y organización de código

En src/hooks: useAuth, useProfiles, useDocuments, useRequests.

En src/lib: supabase.ts que exporta el cliente configurado.

En src/components: componentes reutilizables (Button, Input, Sidebar, PrivateRoute, Layout).

En src/pages: carpetas separadas para student, admin y superuser.

Manejo de errores y notificaciones

Muestra toasts o alertas en cada operación CRUD tanto en éxito como en error.

Valida formularios en frontend (Zod o Yup) y en backend (RLS y errores de Supabase).

Despliegue

Configura scripts en package.json: npm run dev, npm run build, npm start.

Añade netlify.toml o configuración de Vercel para despliegue sin configuración adicional.

Documenta variables de entorno y pasos de despliegue en README.md.

Genera todo el código fuente, archivos de configuración, migraciones SQL y un README.md detallado para ejecutar y desplegar la aplicación en minutos.